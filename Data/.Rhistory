ggplot(data = diamonds.sample[diamonds.sample$cut == "Ideal" || diamonds.sample$cut == "Premium"],) + geom_point(mapping=aes(x=carat,y = log(price),color = cut))
#d
ggplot(data = diamonds.sample[[diamonds.sample$cut == "Ideal" || diamonds.sample$cut == "Premium"]],) + geom_point(mapping=aes(x=carat,y = log(price),color = cut))
diamonds.sample[diamonds.sample$cut == "Ideal" || diamonds.sample$cut == "Premium"]
diamonds.sample[[diamonds.sample$cut == "Ideal" || diamonds.sample$cut == "Premium"]
diamonds.sample[[diamonds.sample$cut == "Ideal" || diamonds.sample$cut == "Premium"]
diamonds.sample[[diamonds.sample$cut == "Ideal" || diamonds.sample$cut == "Premium"]
diamonds.sample[[diamonds.sample$cut == "Ideal" || diamonds.sample$cut == "Premium"]]
diamonds.sample[[diamonds.sample$cut == "Ideal" || diamonds.sample$cut == "Premium"]]
diamonds.sample[diamonds.sample$cut == "Ideal" | diamonds.sample$cut == "Premium"]
|
diamonds.sample[diamonds.sample$cut == "Ideal" || diamonds.sample$cut == "Premium"]
#d
diamonds.sample[diamonds.sample$cut == "Premium"]
#d
diamonds.sample[[diamonds.sample$cut == "Premium"]]
#d
diamonds.sample[diamonds.sample$cut == "Premium",]
#d
diamonds.sample[diamonds.sample$cut == "Premium" || diamonds.sample$cut == "Ideal",]
#d
diamonds.sample[(diamonds.sample$cut == "Premium" || diamonds.sample$cut == "Ideal"),]
#d
diamonds.sample[(diamonds.sample$cut == "Premium") || (diamonds.sample$cut == "Ideal"),]
geom_smooth(formula = y ~ x + I(x^2), se=F)
#d
ggplot(data=diamonds.sample, mapping = aes(x=carat,y=log(price), color = cut) +
#d
ggplot(data=diamonds.sample, mapping = aes(x=carat,y=log(price), color = cut)) +
geom_point() +
geom_smooth(formula = y ~ x + I(x^2), se=F)
)
#d
ggplot(data=diamonds.sample, mapping = aes(x=carat,y=log(price), color = cut)) +
geom_smooth(formula = y ~ x + I(x^2), se=F)
#d
ggplot(data=diamonds.sample, mapping = aes(x=carat,y=log(price), color = cut)) +
geom_point()
#d
ggplot(data=diamonds.sample, mapping = aes(x=carat,y=log(price), color = cut)) +
geom_point() +
geom_smooth(formula = y ~ x + I(x^2), se=F)
#d
ggplot(data=diamonds.sample, mapping = aes(x=carat,y=log(price), color = cut, facet_wrap(.~cut))) +
geom_point() +
geom_smooth(formula = y ~ x + I(x^2), se=F)
#d
ggplot(data=diamonds.sample, mapping = aes(x=carat,y=log(price), color = cut)) +
geom_point() +
geom_smooth(formula = y ~ x + I(x^2), se=F)
#d
ggplot(data=diamonds.sample, mapping = aes(x=carat,y=log(price), color = cut)) +
geom_point() +
geom_smooth(method = "lm",formula = y ~ x + I(x^2), se=F)
?ggplot
#d
ggplot(data=diamonds.sample, mapping = aes(x=carat,y=log(price), color = cut)) +
geom_point() +
geom_smooth(method = "lm",formula = y ~ x + I(x^2), se=F) +
facet_grid(. ~ cut)
#d
ggplot(data=diamonds.sample, mapping = aes(x=carat,y=log(price), color = cut)) +
geom_point() +
geom_smooth(method = "lm",formula = y ~ x + I(x^2), se=F) +
facet_grid(cut ~ .)
#d
ggplot(data=filter(diamonds.sample, cut %in% c("Ideal", "Premium")), mapping = aes(x=carat,y=log(price), color = cut)) +
geom_point() +
geom_smooth(method = "lm",formula = y ~ x + I(x^2), se=F) +
facet_grid(cut ~ .)
#d
ggplot(data=filter(diamonds.sample, cut %in% c("Ideal", "Premium")), mapping = aes(x=carat,y=log(price), color = cut)) +
geom_point() +
geom_smooth(method = "lm",formula = y ~ x + I(x^2), se=F) +
facet_grid(clarity ~ .)
#### Exercise 3 ####
summaryStats <- function(v){
return c(length(v), mean(v), sd(v), stderr(v))
}
#### Exercise 3 ####
summaryStats <- function(v){
return(c(length(v), mean(v), sd(v), stderr(v)))
}
?split
split(diamonds, clarity)
split(diamonds, diamonds$clarity)
?lapply
lapply(split(diamonds, diamonds$clarity), summaryStats)
lapply(diamonds$price/diamonds$carat,summaryStats )
?stderr
?se
?standardError
#### Exercise 3 ####
summaryStats <- function(v){
return(c(length(v), mean(v), sd(v), sd(v)/length(v)))
}
lapply(diamonds$price/diamonds$carat,summaryStats )
lapply(diamonds$price/diamonds$carat,summaryStats)
#d
ggplot(data=filter(diamonds.sample, cut %in% c("Ideal", "Premium")), mapping = aes(x=carat,y=log(price), color = cut)) +
geom_point() +
geom_smooth(method = "lm",formula = y ~ x + I(x^2), se=F) +
facet_grid(clarity ~ .)
return(c(length(v), mean(v), sd(v), sd(v)/sqrt(length(v)))
}
lapply(diamonds$price/diamonds$carat,summaryStats)
split(diamonds, diamonds$clarity)
#### Exercise 3 ####
summaryStats <- function(v){
return(c(length(v), mean(v), sd(v), sd(v)/sqrt(length(v))))
#### Exercise 3 ####
summaryStats <- function(v){
return(c(length(v), mean(v), sd(v), sd(v)/sqrt(length(v))))
}
lapply(diamonds$price/diamonds$carat,summaryStats)
#### Exercise 3 ####
summaryStats <- function(v){
return(c(length(v), mean(v), sd(v), sd(v)/sqrt(length(v))))
}
)
#### Exercise 3 ####
summaryStats <- function(v){
return(c(length(v), mean(v), sd(v), sd(v)/sqrt(length(v))))
}
lapply(diamonds$price/diamonds$carat,summaryStats)
sapply(split(diamonds, diamonds$clarity) ,summaryStats)
sapply(split(diamonds$price, diamonds$clarity) ,summaryStats)
library(ggplot2)
library(foreign)
library(dplyr)
setwd("C:/Users/stbradle/Desktop/Stat331/Data/")
#### Exercise 1 ####
admit <- read.xport("admit.xpt")
stress2015 <- read.xport("stress2015.xpt")
stress2016 <- read.xport("stress2016.xpt")
View(admit)
?names
names(admit)
setNames(admit, tolower(names(admit)))
admit <- setNames(admit, tolower(names(admit)))
View(admit)
stress2015 <- setNames(stress2015, tolower(names(stress2015)))
stress2016 <- setNames(stress2016, tolower(names(stress2016)))
admit <- setNames(admit, tolower(names(admit)))
stress2015 <- setNames(stress2015, tolower(names(stress2015)))
stress2016 <- setNames(stress2016, tolower(names(stress2016)))
?merge
View(stress2015)
View(stress2016)
View(stress2016)
View(stress2015)
#b
merge(stress2015, stress2016)
#b
merge(stress2015, stress2016, by = name)
#b
merge(stress2015, stress2016, by = "name")
#b
merge(stress2015, stress2016, by = "name", all = TRUE)
#b
merged_stress <- merge(stress2015, stress2016, by = "name", all = TRUE)
View(merged_stress)
#b
merged_stress <- merge(stress2015, stress2016, by = "name", all = TRUE, suffixed =c("2015, 2016"))
View(merged_stress)
#b
merged_stress <- merge(stress2015, stress2016, by = "name", all = TRUE, suffixes = c("2015, 2016"))
View(merged_stress)
#b
merged_stress <- merge(stress2015, stress2016, by = "name", all = TRUE, suffixes = c("2015", "2016"))
#b
merged_stress <- merge(stress2015, stress2016, by = "name", all = TRUE, suffixes = c(".2015", ".2016"))
#b
merged_stress <- merge(stress2015, stress2016, by = c("name","id"), all = TRUE, suffixes = c(".2015", ".2016"))
#c
list(stress2015)
#c
lapply(list(stress2015), FUN = nrows)
#c
lapply(list(stress2015), FUN = nrow())
#c
lapply(list(stress2015), FUN = nrow
#c
lapply(list(stress2015), FUN = nrow)
#c
lapply(list(stress2015), FUN = nrow)
lapply(list(stress2016), nrow)
lapply(list(merged_stress),nrow)
View(admit)
#f
merge(merged_stress,admit, by = c("name","id"))
#f
all.merged <- merge(merged_stress,admit, by = c("name","id"))
View(all.merged)
#f
all.merged <- merge(merged_stress,admit, by = c("name","id"), all = TRUE)
View(all.merged)
#f
all.merged <- merge(merged_stress,admit, by = c("name","id"), all.x = TRUE)
View(all.merged)
#f
all.merged <- merge(merged_stress,admit, by = c("name","id"), all = TRUE)
#f
all.merged <- merge(merged_stress,admit, by = c("name","id"))
#b
merged_stress <- merge(stress2015, stress2016, by = c("id"), all = TRUE, suffixes = c(".2015", ".2016"))
View(merged_stress)
"name",
#b
merged_stress <- merge(stress2015, stress2016, by = c("name","id"), all = TRUE, suffixes = c(".2015", ".2016"))
row
for(row in all.mnerged){
row
}
for(row in all.merged){
row
}
print(row)
for(row in all.merged){
print(row)
}
print(all.merged[ndx,])
for(row in 1:nrows(all.merged)){
print(all.merged[row,])
}
for(row in 1:nrow(all.merged)){
print(all.merged[row,])
}
for(ndx in 1:nrow(all.merged)){
row <- all.merged[[ndx,]]
if(row["resthr2015"]){
print(row["resthr2015"])
}
}
for(ndx in 1:nrow(all.merged)){
row <- all.merged[ndx,]
if(row["resthr2015"]){
print(row["resthr2015"])
}
}
for(ndx in 1:nrow(all.merged)){
row <- all.merged[[ndx,]]
if(row["resthr2015"]){
print(row["resthr2015"])
}
}
View(row)
?all
?drop
?dropna
for(ndx in 1:nrow(all.merged)){
row <- all.merged[[ndx,]]
if(row$resthr.2015 == NA && row$resthr.2016 == NA){
hr_yr <- c(hr_yr, "none")
}
else if(row$resthr.2015 != NA && row$resthr.2016 == NA){
hr_yr <- c(hr_yr, "2015")
}
else if(row$resthr.2015 == NA && row$resthr.2016 != NA){
hr_yr <- c(hr_yr, "2016")
}
else{
hr_yr <- c(hr_yr, "both")
}
}
row <- all.merged[[ndx,],]
row <- all.merged[[ndx]]
for(ndx in 1:nrow(all.merged)){
row <- all.merged[[ndx]]
if(row$resthr.2015 == NA && row$resthr.2016 == NA){
hr_yr <- c(hr_yr, "none")
}
else if(row$resthr.2015 != NA && row$resthr.2016 == NA){
hr_yr <- c(hr_yr, "2015")
}
else if(row$resthr.2015 == NA && row$resthr.2016 != NA){
hr_yr <- c(hr_yr, "2016")
}
else{
hr_yr <- c(hr_yr, "both")
}
}
for(ndx in 1:nrow(all.merged)){
row <- all.merged[[ndx,]]
if(row$resthr.2015 == NA && row$resthr.2016 == NA){
hr_yr <- c(hr_yr, "none")
}
else if(row$resthr.2015 != NA && row$resthr.2016 == NA){
hr_yr <- c(hr_yr, "2015")
}
else if(row$resthr.2015 == NA && row$resthr.2016 != NA){
hr_yr <- c(hr_yr, "2016")
}
else{
hr_yr <- c(hr_yr, "both")
}
}
row <- all.merged[ndx,]
for(ndx in 1:nrow(all.merged)){
row <- all.merged[ndx,]
if(row$resthr.2015 == NA && row$resthr.2016 == NA){
hr_yr <- c(hr_yr, "none")
}
else if(row$resthr.2015 != NA && row$resthr.2016 == NA){
hr_yr <- c(hr_yr, "2015")
}
else if(row$resthr.2015 == NA && row$resthr.2016 != NA){
hr_yr <- c(hr_yr, "2016")
}
else{
hr_yr <- c(hr_yr, "both")
}
}
for(ndx in 1:nrow(all.merged)){
row <- all.merged[ndx,]
if(row$resthr.2015 == NA & row$resthr.2016 == NA){
hr_yr <- c(hr_yr, "none")
}
else if(row$resthr.2015 != NA & row$resthr.2016 == NA){
hr_yr <- c(hr_yr, "2015")
}
else if(row$resthr.2015 == NA & row$resthr.2016 != NA){
hr_yr <- c(hr_yr, "2016")
}
else{
hr_yr <- c(hr_yr, "both")
}
}
if(row$resthr.2015 == NA && row$resthr.2016 == NA){
hr_yr <- c(hr_yr, "none")
}
for(ndx in 1:nrow(all.merged)){
for(ndx in 1:nrow(all.merged)){
if((row$resthr.2015 == NA)&&(row$resthr.2016 == NA){
hr_yr <- c(hr_yr, "none")
}
else if((row$resthr.2015 != NA)&&(row$resthr.2016 == NA)){
hr_yr <- c(hr_yr, "2015")
}
else if((row$resthr.2015 == NA)&&(row$resthr.2016 != NA)){
hr_yr <- c(hr_yr, "2016")
}
else{
hr_yr <- c(hr_yr, "both")
}
}
for(ndx in 1:nrow(all.merged)){
row <- all.merged[ndx,]
if((row$resthr.2015 == NA)&&(row$resthr.2016 == NA)){
hr_yr <- c(hr_yr, "none")
}
else if((row$resthr.2015 != NA)&&(row$resthr.2016 == NA)){
hr_yr <- c(hr_yr, "2015")
}
else if((row$resthr.2015 == NA)&&(row$resthr.2016 != NA)){
hr_yr <- c(hr_yr, "2016")
}
else{
hr_yr <- c(hr_yr, "both")
}
}
row$resthr.2015 == NA
row$resthr.2015
?notnull
?notna
for(ndx in 1:nrow(all.merged)){
row <- all.merged[ndx,]
if(is.na(row$resthr.2015)&& is.na(row$resthr.2016)){
hr_yr <- c(hr_yr, "none")
}
else if( !is.na(row$resthr.2015) && is.na(row$resthr.2016)){
hr_yr <- c(hr_yr, "2015")
}
else if(is.na(row$resthr.2015) && !is.na(row$resthr.2016)){
hr_yr <- c(hr_yr, "2016")
}
else{
hr_yr <- c(hr_yr, "both")
}
}
#g
hr_yr <- c()
for(ndx in 1:nrow(all.merged)){
row <- all.merged[ndx,]
if(is.na(row$resthr.2015)&& is.na(row$resthr.2016)){
hr_yr <- c(hr_yr, "none")
}
else if( !is.na(row$resthr.2015) && is.na(row$resthr.2016)){
hr_yr <- c(hr_yr, "2015")
}
else if(is.na(row$resthr.2015) && !is.na(row$resthr.2016)){
hr_yr <- c(hr_yr, "2016")
}
else{
hr_yr <- c(hr_yr, "both")
}
}
all.merged["years"] = hr_yr
View(all.merged)
?ifelse
write.csv(diamonds, "diamonds.csv")
write.csv(diamonds, "diamonds.csv",quote = FALSE)
write.foreign(diamonds, "diamonds.xpt", package = "SAS")
?write.foreign
write.foreign(diamonds, "diamonds.xpt",tempfile(), package = "SAS")
x <- c(1,2,3,4)
y < c(5,6,7,8)
y <- c(5,6,7,8)
z <- c(x,y)
write(z, "xy.Rdata")
write(z, "xy2.Rdata", ASCII = TRUE)
save(z, "xy.Rdata")
save(z, file = "xy.Rdata")
save(z, file = "xy2.Rdata", ASCII = TRUE)
save(z, file = "xy2.Rdata", ASCII = TRUE)
save(z,ascii = TRUE, file = "xy2.Rdata")
load("xy2.RData")
setwd("C:/Users/stbradle/Desktop/Stat331/Data/")
library(ggplot2)
library(foreign)
library(dplyr)
#a
admit <- read.xport("admit.xpt")
stress2015 <- read.xport("stress2015.xpt")
stress2016 <- read.xport("stress2016.xpt")
admit <- setNames(admit, tolower(names(admit)))
stress2015 <- setNames(stress2015, tolower(names(stress2015)))
stress2016 <- setNames(stress2016, tolower(names(stress2016)))
#b
merged_stress <- merge(stress2015, stress2016, by = c("name","id"), all = TRUE, suffixes = c(".2015", ".2016"))
#c
lapply(list(stress2015), FUN = nrow)
lapply(list(stress2016), nrow)
lapply(list(merged_stress),nrow)
#f
all.merged <- merge(merged_stress,admit, by = c("name","id"))
#g
hr_yr <- c()
for(ndx in 1:nrow(all.merged)){
row <- all.merged[ndx,]
if(is.na(row$resthr.2015)&& is.na(row$resthr.2016)){
hr_yr <- c(hr_yr, "none")
}
else if( !is.na(row$resthr.2015) && is.na(row$resthr.2016)){
hr_yr <- c(hr_yr, "2015")
}
else if(is.na(row$resthr.2015) && !is.na(row$resthr.2016)){
hr_yr <- c(hr_yr, "2016")
}
else{
hr_yr <- c(hr_yr, "both")
}
}
all.merged["years"] = hr_yr
write.csv(diamonds, "diamonds.csv",quote = FALSE)
write.foreign(diamonds, "diamonds.xpt",tempfile(), package = "SAS")
#### Exercise 3 ####
#a
list.files()
grep("US Earthquakes", list.files())
file.ndx <- grep("US Earthquakes", list.files())
for(ndx in file.ndx){
filename <- list.files()[ndx]
year <- substr(filename, start = grep("Earthquakes",filename) + 2, end = grep(".csv", filename) - 4)
tDf <- read.csv(filename)
eqDf <- merge(eqDf, tDf, by="id", all = TRUE, suffixes = c("", year))
}
year <- substr(filename, start = grep("Earthquakes",filename) + 2, finish = grep(".csv", filename) - 4)
?substr
for(ndx in file.ndx){
filename <- list.files()[ndx]
year <- substr(filename, start = grep("Earthquakes",filename) + 2, stop = grep(".csv", filename) - 4)
tDf <- read.csv(filename)
eqDf <- merge(eqDf, tDf, by="id", all = TRUE, suffixes = c("", year))
}
eqDf <- data.frame()
for(ndx in file.ndx){
filename <- list.files()[ndx]
year <- substr(filename, start = grep("Earthquakes",filename) + 2, stop = grep(".csv", filename) - 4)
tDf <- read.csv(filename)
eqDf <- merge(eqDf, tDf, by="id", all = TRUE, suffixes = c("", year))
}
View(tDf)
eqDf <- rbind(eqDf, tDf)
View(eqDf)
#### Exercise 3 ####
#a
list.files()
file.ndx <- grep("US Earthquakes", list.files())
eqDf <- data.frame()
filename <- list.files()[ndx]
for(ndx in file.ndx){
filename <- list.files()[ndx]
tDf <- read.csv(filename)
eqDf <- rbind(eqDf, tDf)
}
for(ndx in file.ndx){
filename <- list.files()[ndx]
tDf <- read.csv(filename)
eqDf <- rbind(eqDf, tDf)
}
View(eqDf)
#### Exercise 3 ####
#a
list.files()
file.ndx <- grep("US Earthquakes", list.files())
eqDf <- data.frame()
for(ndx in file.ndx){
filename <- list.files()[ndx]
tDf <- read.csv(filename)
eqDf <- rbind(eqDf, tDf)
}
